{"ast":null,"code":"import _classCallCheck from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/linwei/Web_Search_Application/pdf-search-react/src/components/Filter.js\";\nimport React from 'react';\nimport { Tree } from 'antd'; //const RadioGroup = Radio.Group;\n// export class Filter extends React.Component {\n//     state = {\n//         value: 1,\n//     }\n//\n//     onChange = (e) => {\n//         this.setState({\n//             value: e.target.value,\n//         });\n//         this.props.filterChange(e.target.value);\n//     }\n//\n//     render() {\n//         // const radioStyle = {\n//         //\n//         // };\n//         return (\n//             <RadioGroup onChange={this.onChange} value={this.state.value}>\n//                 <Radio className= 'Radio' value={1}>All</Radio>\n//                 <Radio className= 'Radio' value={2}>Title</Radio>\n//                 <Radio className= 'Radio' value={3}>Author</Radio>\n//                 <Radio className= 'Radio' value={4}>Conference</Radio>\n//                 <Radio className= 'Radio' value={5}>Year</Radio>\n//\n//\n//             </RadioGroup>\n//         );\n//     }\n// }\n\nvar TreeNode = Tree.TreeNode; // const returnValue = {title:[],author:[]};\n\nexport var Filter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Filter, _React$Component);\n\n  function Filter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Filter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Filter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      expandedKeysAuthor: [],\n      autoExpandParent: true,\n      checkedKeys: [],\n      selectedKeys: [],\n      authorReturn: {}\n    };\n\n    _this.titleList = function () {\n      var input = _this.props.input; //console.log(input);\n\n      var titleIndex = _this.props.titleIndex; //console.log(titleIndex);\n\n      var result = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = input.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var word = _step.value;\n\n          //console.log(word);\n          for (var k in titleIndex) {\n            //console.log(k);\n            if (k.startsWith(word)) {\n              result.push(k);\n            }\n          }\n        } //console.log(result);\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var treeTitle = [{\n        title: 'title',\n        key: 'title',\n        children: result.map(function (item) {\n          return {\n            title: item,\n            key: item\n          };\n        })\n      }]; // console.log(treeTitle);\n\n      return treeTitle;\n    };\n\n    _this.authorList = function () {\n      var input = _this.props.input; //console.log(input);\n\n      var titleIndex = _this.props.authorIndex; //console.log(titleIndex);\n\n      var result = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = input.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var word = _step2.value;\n\n          //console.log(word);\n          for (var k in titleIndex) {\n            //console.log(k);\n            if (k.startsWith(word)) {\n              result.push(k);\n            }\n          }\n        } //console.log(result);\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var treeTitle = [{\n        title: 'author',\n        key: 'author',\n        children: result.map(function (item) {\n          return {\n            title: item,\n            key: item\n          };\n        })\n      }]; //console.log(treeTitle);\n\n      return treeTitle;\n    };\n\n    _this.onExpand = function (expandedKeys) {\n      console.log('onExpand', expandedKeys); // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n      // or, you can remove all expanded children keys.\n\n      _this.setState(function (prevState) {\n        return {\n          expandedKeys: expandedKeys,\n          autoExpandParent: false\n        };\n      });\n    };\n\n    _this.onCheck = function (checkedKeys) {\n      console.log('onCheck', checkedKeys);\n\n      _this.setState(function (prevState) {\n        return {\n          checkedKeys: checkedKeys,\n          returnValue: {\n            key: _this.state.expandedKeys,\n            value: _this.state.checkedKeys\n          }\n        };\n      });\n\n      _this.props.getFilter(_this.state.returnValue);\n    };\n\n    _this.onSelect = function (selectedKeys, info) {\n      console.log('onSelect', info);\n\n      _this.setState({\n        selectedKeys: selectedKeys\n      });\n    };\n\n    _this.renderTreeNodes = function (data) {\n      return data.map(function (item) {\n        if (item.children) {\n          return React.createElement(TreeNode, {\n            title: item.title,\n            key: item.title,\n            dataRef: item,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154\n            },\n            __self: this\n          }, _this.renderTreeNodes(item.children));\n        }\n\n        return React.createElement(TreeNode, Object.assign({}, item, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }));\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Filter, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(Tree, {\n        checkable: true,\n        onExpand: this.onExpand,\n        expandedKeys: this.state.expandedKeys,\n        autoExpandParent: this.state.autoExpandParent,\n        onCheck: this.onCheck,\n        checkedKeys: this.state.checkedKeys,\n        onSelect: this.onSelect,\n        selectedKeys: this.state.selectedKeys,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, this.renderTreeNodes(this.titleList())), React.createElement(Tree, {\n        checkable: true,\n        onExpand: this.onExpand,\n        expandedKeys: this.state.expandedKeys,\n        autoExpandParent: this.state.autoExpandParent,\n        onCheck: this.onCheck,\n        checkedKeys: this.state.checkedKeys,\n        onSelect: this.onSelect,\n        selectedKeys: this.state.selectedKeys,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, this.renderTreeNodes(this.authorList())));\n    }\n  }]);\n\n  return Filter;\n}(React.Component);","map":{"version":3,"sources":["/Users/linwei/Web_Search_Application/pdf-search-react/src/components/Filter.js"],"names":["React","Tree","TreeNode","Filter","state","expandedKeysAuthor","autoExpandParent","checkedKeys","selectedKeys","authorReturn","titleList","input","props","titleIndex","result","values","word","k","startsWith","push","treeTitle","title","key","children","map","item","authorList","authorIndex","onExpand","expandedKeys","console","log","setState","prevState","onCheck","returnValue","value","getFilter","onSelect","info","renderTreeNodes","data","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Tree  } from 'antd';\n\n//const RadioGroup = Radio.Group;\n\n// export class Filter extends React.Component {\n//     state = {\n//         value: 1,\n//     }\n//\n//     onChange = (e) => {\n//         this.setState({\n//             value: e.target.value,\n//         });\n//         this.props.filterChange(e.target.value);\n//     }\n//\n//     render() {\n//         // const radioStyle = {\n//         //\n//         // };\n//         return (\n//             <RadioGroup onChange={this.onChange} value={this.state.value}>\n//                 <Radio className= 'Radio' value={1}>All</Radio>\n//                 <Radio className= 'Radio' value={2}>Title</Radio>\n//                 <Radio className= 'Radio' value={3}>Author</Radio>\n//                 <Radio className= 'Radio' value={4}>Conference</Radio>\n//                 <Radio className= 'Radio' value={5}>Year</Radio>\n//\n//\n//             </RadioGroup>\n//         );\n//     }\n// }\nconst TreeNode = Tree.TreeNode;\n\n\n\n\n// const returnValue = {title:[],author:[]};\n\n\nexport class Filter extends React.Component {\n    state = {\n        expandedKeysAuthor: [],\n        autoExpandParent: true,\n        checkedKeys: [],\n        selectedKeys: [],\n        authorReturn : {},\n    }\n\n    titleList = () => {\n        const input  = this.props.input;\n        //console.log(input);\n        const titleIndex = this.props.titleIndex;\n        //console.log(titleIndex);\n        const result  = [];\n        for(let word of input.values()){\n            //console.log(word);\n            for(let k in titleIndex){\n                //console.log(k);\n                if (k.startsWith(word)){\n                      result.push(k)\n                }\n            }\n        }\n        //console.log(result);\n\n\n        const treeTitle = [{\n            title: 'title',\n            key: 'title',\n            children: result.map((item) => {\n                return {title:item ,key :item }\n            })\n        },\n        ];\n       // console.log(treeTitle);\n        return treeTitle;\n\n    }\n\n\n    authorList = () => {\n        const input  = this.props.input;\n        //console.log(input);\n        const titleIndex = this.props.authorIndex;\n        //console.log(titleIndex);\n        const result  = [];\n        for(let word of input.values()){\n            //console.log(word);\n            for(let k in titleIndex){\n                //console.log(k);\n                if (k.startsWith(word)){\n                    result.push(k)\n                }\n            }\n        }\n        //console.log(result);\n\n\n        const treeTitle = [{\n            title: 'author',\n            key: 'author',\n            children: result.map((item) => {\n                return {title:item ,key :item }\n            })\n        },\n        ];\n         //console.log(treeTitle);\n        return treeTitle;\n\n    }\n\n\n\n\n\n    onExpand = (expandedKeys) => {\n        console.log('onExpand', expandedKeys);\n        // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n        // or, you can remove all expanded children keys.\n        this.setState((prevState)=>{\n            return {\n                expandedKeys:expandedKeys,\n                autoExpandParent: false,\n            };\n        });\n    }\n\n    onCheck = (checkedKeys) => {\n        console.log('onCheck', checkedKeys);\n        this.setState((prevState)=>{\n            return {\n                checkedKeys: checkedKeys,\n                returnValue: {key:this.state.expandedKeys,value:this.state.checkedKeys},\n            }\n\n        });\n        this.props.getFilter(this.state.returnValue);\n\n\n    }\n\n    onSelect = (selectedKeys, info) => {\n        console.log('onSelect', info);\n        this.setState({ selectedKeys });\n    }\n\n    renderTreeNodes = (data) => {\n        return data.map((item) => {\n            if (item.children) {\n                return (\n                    <TreeNode title={item.title} key={item.title} dataRef={item}>\n                        {this.renderTreeNodes(item.children)}\n                    </TreeNode>\n                );\n            }\n            return <TreeNode {...item} />;\n        });\n    }\n\n\n\n\n\n\n\n    render() {\n        return (\n            <div>\n            <Tree\n                checkable\n                onExpand={this.onExpand}\n                expandedKeys={this.state.expandedKeys}\n                autoExpandParent={this.state.autoExpandParent}\n                onCheck={this.onCheck}\n                checkedKeys={this.state.checkedKeys}\n                onSelect={this.onSelect}\n                selectedKeys={this.state.selectedKeys}\n            >\n                {this.renderTreeNodes(this.titleList())}\n            </Tree>\n                <Tree\n                    checkable\n                    onExpand={this.onExpand}\n                    expandedKeys={this.state.expandedKeys}\n                    autoExpandParent={this.state.autoExpandParent}\n                    onCheck={this.onCheck}\n                    checkedKeys={this.state.checkedKeys}\n                    onSelect={this.onSelect}\n                    selectedKeys={this.state.selectedKeys}\n                >\n                    {this.renderTreeNodes(this.authorList())}\n                </Tree>\n                {/*<Tree*/}\n                    {/*checkable*/}\n                    {/*onExpand={this.onExpand}*/}\n                    {/*expandedKeys={this.state.expandedKeys}*/}\n                    {/*autoExpandParent={this.state.autoExpandParent}*/}\n                    {/*onCheck={this.onCheck}*/}\n                    {/*checkedKeys={this.state.checkedKeys}*/}\n                    {/*onSelect={this.onSelect}*/}\n                    {/*selectedKeys={this.state.selectedKeys}*/}\n                {/*>*/}\n                    {/*{this.renderTreeNodes(treeData)}*/}\n                {/*</Tree>*/}\n                {/*<Tree*/}\n                    {/*checkable*/}\n                    {/*onExpand={this.onExpand}*/}\n                    {/*expandedKeys={this.state.expandedKeys}*/}\n                    {/*autoExpandParent={this.state.autoExpandParent}*/}\n                    {/*onCheck={this.onCheck}*/}\n                    {/*checkedKeys={this.state.checkedKeys}*/}\n                    {/*onSelect={this.onSelect}*/}\n                    {/*selectedKeys={this.state.selectedKeys}*/}\n                {/*>*/}\n                    {/*{this.renderTreeNodes(treeData)}*/}\n                {/*</Tree>*/}\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}