{"ast":null,"code":"import _classCallCheck from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/linwei/Web_Search_Application/pdf-search-react/src/components/FilterTree.js\";\nimport React from 'react';\nimport { Tree } from 'antd';\nvar TreeNode = Tree.TreeNode; // const returnValue = {title:[],author:[]};\n\nexport var FilterTree =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FilterTree, _React$Component);\n\n  function FilterTree() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FilterTree);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FilterTree)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      expandedKeys: [],\n      autoExpandParent: true,\n      checkedKeys: [],\n      selectedKeys: [] // ListTree = () => {\n      //     const input  = this.props.input;\n      //     //console.log(input);\n      //     const titleIndex = this.props.Index;\n      //     //console.log(titleIndex);\n      //     const result  = [];\n      //     for(let word of input.values()){\n      //         //console.log(word);\n      //         for(let k in titleIndex){\n      //             //console.log(k);\n      //             if (k.startsWith(word)){\n      //                 result.push(k)\n      //             }\n      //         }\n      //     }\n      //     //console.log(result);\n      //\n      //\n      //     const treeTitle = [{\n      //         title: this.props.name,\n      //         key: this.props.name,\n      //         children: result.map((item) => {\n      //             return {title:item ,key :item }\n      //         })\n      //     },\n      //     ];\n      //     //console.log(treeTitle);\n      //     return treeTitle;\n      //\n      // }\n\n    };\n\n    _this.onExpand = function (expandedKeys) {\n      console.log('onExpand', expandedKeys); // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n      // or, you can remove all expanded children keys.\n\n      _this.setState(function (prevState) {\n        return {\n          expandedKeys: expandedKeys,\n          autoExpandParent: false\n        };\n      });\n    };\n\n    _this.onCheck = function (checkedKeys) {\n      //console.log('onCheck', checkedKeys);\n      _this.setState(function (prevState) {\n        return {\n          checkedKeys: checkedKeys\n        };\n      });\n\n      _this.props.getFilter(checkedKeys);\n    };\n\n    _this.onSelect = function (selectedKeys, info) {\n      console.log('onSelect', info);\n\n      _this.setState({\n        selectedKeys: selectedKeys\n      });\n    };\n\n    _this.renderTreeNodes = function (data) {\n      return data.map(function (item) {\n        if (item.children) {\n          return React.createElement(TreeNode, {\n            title: item.title,\n            key: item.title,\n            dataRef: item,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          }, _this.renderTreeNodes(item.children));\n        }\n\n        return React.createElement(TreeNode, Object.assign({}, item, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }));\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(FilterTree, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Tree, {\n        checkable: true,\n        onExpand: this.onExpand,\n        expandedKeys: this.state.expandedKeys,\n        autoExpandParent: this.state.autoExpandParent,\n        onCheck: this.onCheck,\n        checkedKeys: this.state.checkedKeys,\n        onSelect: this.onSelect,\n        selectedKeys: this.state.selectedKeys,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, this.renderTreeNodes(this.ListTree()));\n    }\n  }]);\n\n  return FilterTree;\n}(React.Component);","map":{"version":3,"sources":["/Users/linwei/Web_Search_Application/pdf-search-react/src/components/FilterTree.js"],"names":["React","Tree","TreeNode","FilterTree","state","expandedKeys","autoExpandParent","checkedKeys","selectedKeys","onExpand","console","log","setState","prevState","onCheck","props","getFilter","onSelect","info","renderTreeNodes","data","map","item","children","title","ListTree","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAsB,MAAtB;AAEA,IAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAtB,C,CAKA;;AAGA,WAAaC,UAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UACIC,KADJ,GACY;AACJC,MAAAA,YAAY,EAAE,EADV;AAEJC,MAAAA,gBAAgB,EAAE,IAFd;AAGJC,MAAAA,WAAW,EAAE,EAHT;AAIJC,MAAAA,YAAY,EAAE,EAJV,CAQR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArCQ,KADZ;;AAAA,UA8CIC,QA9CJ,GA8Ce,UAACJ,YAAD,EAAkB;AACzBK,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBN,YAAxB,EADyB,CAEzB;AACA;;AACA,YAAKO,QAAL,CAAc,UAACC,SAAD,EAAa;AACvB,eAAO;AACHR,UAAAA,YAAY,EAACA,YADV;AAEHC,UAAAA,gBAAgB,EAAE;AAFf,SAAP;AAIH,OALD;AAMH,KAxDL;;AAAA,UA4DIQ,OA5DJ,GA4Dc,UAACP,WAAD,EAAiB;AACvB;AACA,YAAKK,QAAL,CAAc,UAACC,SAAD,EAAa;AACvB,eAAO;AACHN,UAAAA,WAAW,EAAEA;AADV,SAAP;AAGH,OAJD;;AAKA,YAAKQ,KAAL,CAAWC,SAAX,CAAqBT,WAArB;AACH,KApEL;;AAAA,UAuEIU,QAvEJ,GAuEe,UAACT,YAAD,EAAeU,IAAf,EAAwB;AAC/BR,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBO,IAAxB;;AACA,YAAKN,QAAL,CAAc;AAAEJ,QAAAA,YAAY,EAAZA;AAAF,OAAd;AACH,KA1EL;;AAAA,UA4EIW,eA5EJ,GA4EsB,UAACC,IAAD,EAAU;AACxB,aAAOA,IAAI,CAACC,GAAL,CAAS,UAACC,IAAD,EAAU;AACtB,YAAIA,IAAI,CAACC,QAAT,EAAmB;AACf,iBACI,oBAAC,QAAD;AAAU,YAAA,KAAK,EAAED,IAAI,CAACE,KAAtB;AAA6B,YAAA,GAAG,EAAEF,IAAI,CAACE,KAAvC;AAA8C,YAAA,OAAO,EAAEF,IAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK,MAAKH,eAAL,CAAqBG,IAAI,CAACC,QAA1B,CADL,CADJ;AAKH;;AACD,eAAO,oBAAC,QAAD,oBAAcD,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACH,OATM,CAAP;AAUH,KAvFL;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BA+Fa;AACL,aACQ,oBAAC,IAAD;AACI,QAAA,SAAS,MADb;AAEI,QAAA,QAAQ,EAAE,KAAKb,QAFnB;AAGI,QAAA,YAAY,EAAE,KAAKL,KAAL,CAAWC,YAH7B;AAII,QAAA,gBAAgB,EAAE,KAAKD,KAAL,CAAWE,gBAJjC;AAKI,QAAA,OAAO,EAAE,KAAKQ,OALlB;AAMI,QAAA,WAAW,EAAE,KAAKV,KAAL,CAAWG,WAN5B;AAOI,QAAA,QAAQ,EAAE,KAAKU,QAPnB;AAQI,QAAA,YAAY,EAAE,KAAKb,KAAL,CAAWI,YAR7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUK,KAAKW,eAAL,CAAqB,KAAKM,QAAL,EAArB,CAVL,CADR;AAgBH;AAhHL;;AAAA;AAAA,EAAgCzB,KAAK,CAAC0B,SAAtC","sourcesContent":["import React from 'react';\nimport { Tree  } from 'antd';\n\nconst TreeNode = Tree.TreeNode;\n\n\n\n\n// const returnValue = {title:[],author:[]};\n\n\nexport class FilterTree extends React.Component {\n    state = {\n        expandedKeys: [],\n        autoExpandParent: true,\n        checkedKeys: [],\n        selectedKeys: [],\n    }\n\n\n    // ListTree = () => {\n    //     const input  = this.props.input;\n    //     //console.log(input);\n    //     const titleIndex = this.props.Index;\n    //     //console.log(titleIndex);\n    //     const result  = [];\n    //     for(let word of input.values()){\n    //         //console.log(word);\n    //         for(let k in titleIndex){\n    //             //console.log(k);\n    //             if (k.startsWith(word)){\n    //                 result.push(k)\n    //             }\n    //         }\n    //     }\n    //     //console.log(result);\n    //\n    //\n    //     const treeTitle = [{\n    //         title: this.props.name,\n    //         key: this.props.name,\n    //         children: result.map((item) => {\n    //             return {title:item ,key :item }\n    //         })\n    //     },\n    //     ];\n    //     //console.log(treeTitle);\n    //     return treeTitle;\n    //\n    // }\n\n\n\n\n\n\n\n    onExpand = (expandedKeys) => {\n        console.log('onExpand', expandedKeys);\n        // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n        // or, you can remove all expanded children keys.\n        this.setState((prevState)=>{\n            return {\n                expandedKeys:expandedKeys,\n                autoExpandParent: false,\n            };\n        });\n    }\n\n\n\n    onCheck = (checkedKeys) => {\n        //console.log('onCheck', checkedKeys);\n        this.setState((prevState)=>{\n            return {\n                checkedKeys: checkedKeys,\n            }\n        });\n        this.props.getFilter(checkedKeys);\n    }\n\n\n    onSelect = (selectedKeys, info) => {\n        console.log('onSelect', info);\n        this.setState({ selectedKeys });\n    }\n\n    renderTreeNodes = (data) => {\n        return data.map((item) => {\n            if (item.children) {\n                return (\n                    <TreeNode title={item.title} key={item.title} dataRef={item}>\n                        {this.renderTreeNodes(item.children)}\n                    </TreeNode>\n                );\n            }\n            return <TreeNode {...item} />;\n        });\n    }\n\n\n\n\n\n\n\n    render() {\n        return (\n                <Tree\n                    checkable\n                    onExpand={this.onExpand}\n                    expandedKeys={this.state.expandedKeys}\n                    autoExpandParent={this.state.autoExpandParent}\n                    onCheck={this.onCheck}\n                    checkedKeys={this.state.checkedKeys}\n                    onSelect={this.onSelect}\n                    selectedKeys={this.state.selectedKeys}\n                >\n                    {this.renderTreeNodes(this.ListTree())}\n                </Tree>\n\n\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}