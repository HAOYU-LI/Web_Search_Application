{"ast":null,"code":"import _classCallCheck from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/linwei/Web_Search_Application/pdf-search-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/linwei/Web_Search_Application/pdf-search-react/src/components/Filter.js\";\nimport React from 'react';\nimport { Tree } from 'antd'; //const RadioGroup = Radio.Group;\n// export class Filter extends React.Component {\n//     state = {\n//         value: 1,\n//     }\n//\n//     onChange = (e) => {\n//         this.setState({\n//             value: e.target.value,\n//         });\n//         this.props.filterChange(e.target.value);\n//     }\n//\n//     render() {\n//         // const radioStyle = {\n//         //\n//         // };\n//         return (\n//             <RadioGroup onChange={this.onChange} value={this.state.value}>\n//                 <Radio className= 'Radio' value={1}>All</Radio>\n//                 <Radio className= 'Radio' value={2}>Title</Radio>\n//                 <Radio className= 'Radio' value={3}>Author</Radio>\n//                 <Radio className= 'Radio' value={4}>Conference</Radio>\n//                 <Radio className= 'Radio' value={5}>Year</Radio>\n//\n//\n//             </RadioGroup>\n//         );\n//     }\n// }\n\nvar TreeNode = Tree.TreeNode;\nvar treeAuthor = [{\n  title: 'author',\n  key: 'title',\n  children: [{\n    title: '0-0-0',\n    key: '0-0-0'\n  }, {\n    title: '0-0-1',\n    key: '0-0-1'\n  }, {\n    title: '0-0-2',\n    key: '0-0-2'\n  }]\n}];\nexport var Filter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Filter, _React$Component);\n\n  function Filter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Filter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Filter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      expandedKeys: ['0-0-0', '0-0-1'],\n      autoExpandParent: true,\n      checkedKeys: ['0-0-0'],\n      selectedKeys: []\n    };\n\n    _this.titleList = function () {\n      var input = _this.props.input; //console.log(input);\n\n      var titleIndex = _this.props.titleIndex; //console.log(titleIndex);\n\n      var result = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = input.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var word = _step.value;\n\n          //console.log(word);\n          for (var k in titleIndex) {\n            //console.log(k);\n            if (k.startsWith(word)) {\n              result.push(k);\n            }\n          }\n        } //console.log(result);\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var treeTitle = [{\n        title: 'title',\n        key: 'title',\n        children: result.map(function (item) {\n          return {\n            title: item,\n            key: item\n          };\n        })\n      }]; // console.log(treeTitle);\n\n      return treeTitle;\n    };\n\n    _this.authorList = function () {\n      var input = _this.props.input; //console.log(input);\n\n      var titleIndex = _this.props.authorIndex; //console.log(titleIndex);\n\n      var result = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = input.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var word = _step2.value;\n\n          //console.log(word);\n          for (var k in titleIndex) {\n            //console.log(k);\n            if (k.startsWith(word)) {\n              result.push(k);\n            }\n          }\n        } //console.log(result);\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var treeTitle = [{\n        title: 'author',\n        key: 'author',\n        children: result.map(function (item) {\n          return {\n            title: item,\n            key: item\n          };\n        })\n      }]; //console.log(treeTitle);\n\n      return treeTitle;\n    };\n\n    _this.onExpand = function (expandedKeys) {\n      console.log('onExpand', expandedKeys); // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n      // or, you can remove all expanded children keys.\n\n      _this.setState({\n        expandedKeys: expandedKeys,\n        autoExpandParent: false\n      });\n    };\n\n    _this.onCheck = function (checkedKeys) {\n      console.log('onCheck', checkedKeys);\n\n      _this.setState({\n        checkedKeys: checkedKeys\n      });\n    };\n\n    _this.onSelect = function (selectedKeys, info) {\n      console.log('onSelect', info);\n\n      _this.setState({\n        selectedKeys: selectedKeys\n      });\n    };\n\n    _this.renderTreeNodes = function (data) {\n      return data.map(function (item) {\n        if (item.children) {\n          return React.createElement(TreeNode, {\n            title: item.title,\n            key: item.title,\n            dataRef: item,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 158\n            },\n            __self: this\n          }, _this.renderTreeNodes(item.children));\n        }\n\n        return React.createElement(TreeNode, Object.assign({}, item, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }));\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Filter, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(Tree, {\n        checkable: true,\n        onExpand: this.onExpand,\n        expandedKeys: this.state.expandedKeys,\n        autoExpandParent: this.state.autoExpandParent,\n        onCheck: this.onCheck,\n        checkedKeys: this.state.checkedKeys,\n        onSelect: this.onSelect,\n        selectedKeys: this.state.selectedKeys,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, this.renderTreeNodes(this.titleList())), React.createElement(Tree, {\n        checkable: true,\n        onExpand: this.onExpand,\n        expandedKeys: this.state.expandedKeys,\n        autoExpandParent: this.state.autoExpandParent,\n        onCheck: this.onCheck,\n        checkedKeys: this.state.checkedKeys,\n        onSelect: this.onSelect,\n        selectedKeys: this.state.selectedKeys,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, this.renderTreeNodes(this.authorList())));\n    }\n  }]);\n\n  return Filter;\n}(React.Component);","map":{"version":3,"sources":["/Users/linwei/Web_Search_Application/pdf-search-react/src/components/Filter.js"],"names":["React","Tree","TreeNode","treeAuthor","title","key","children","Filter","state","expandedKeys","autoExpandParent","checkedKeys","selectedKeys","titleList","input","props","titleIndex","result","values","word","k","startsWith","push","treeTitle","map","item","authorList","authorIndex","onExpand","console","log","setState","onCheck","onSelect","info","renderTreeNodes","data","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Tree  } from 'antd';\n\n//const RadioGroup = Radio.Group;\n\n// export class Filter extends React.Component {\n//     state = {\n//         value: 1,\n//     }\n//\n//     onChange = (e) => {\n//         this.setState({\n//             value: e.target.value,\n//         });\n//         this.props.filterChange(e.target.value);\n//     }\n//\n//     render() {\n//         // const radioStyle = {\n//         //\n//         // };\n//         return (\n//             <RadioGroup onChange={this.onChange} value={this.state.value}>\n//                 <Radio className= 'Radio' value={1}>All</Radio>\n//                 <Radio className= 'Radio' value={2}>Title</Radio>\n//                 <Radio className= 'Radio' value={3}>Author</Radio>\n//                 <Radio className= 'Radio' value={4}>Conference</Radio>\n//                 <Radio className= 'Radio' value={5}>Year</Radio>\n//\n//\n//             </RadioGroup>\n//         );\n//     }\n// }\nconst TreeNode = Tree.TreeNode;\n\n\n\n\nconst treeAuthor = [{\n    title: 'author',\n    key: 'title',\n    children: [{\n        title: '0-0-0',\n        key: '0-0-0',\n\n    }, {\n        title: '0-0-1',\n        key: '0-0-1',\n\n    }, {\n        title: '0-0-2',\n        key: '0-0-2',\n    }],\n},\n];\n\n\nexport class Filter extends React.Component {\n    state = {\n        expandedKeys: ['0-0-0', '0-0-1'],\n        autoExpandParent: true,\n        checkedKeys: ['0-0-0'],\n        selectedKeys: [],\n    }\n\n    titleList = () => {\n        const input  = this.props.input;\n        //console.log(input);\n        const titleIndex = this.props.titleIndex;\n        //console.log(titleIndex);\n        const result  = [];\n        for(let word of input.values()){\n            //console.log(word);\n            for(let k in titleIndex){\n                //console.log(k);\n                if (k.startsWith(word)){\n                      result.push(k)\n                }\n            }\n        }\n        //console.log(result);\n\n\n        const treeTitle = [{\n            title: 'title',\n            key: 'title',\n            children: result.map((item) => {\n                return {title:item ,key :item }\n            })\n        },\n        ];\n       // console.log(treeTitle);\n        return treeTitle;\n\n    }\n\n\n    authorList = () => {\n        const input  = this.props.input;\n        //console.log(input);\n        const titleIndex = this.props.authorIndex;\n        //console.log(titleIndex);\n        const result  = [];\n        for(let word of input.values()){\n            //console.log(word);\n            for(let k in titleIndex){\n                //console.log(k);\n                if (k.startsWith(word)){\n                    result.push(k)\n                }\n            }\n        }\n        //console.log(result);\n\n\n        const treeTitle = [{\n            title: 'author',\n            key: 'author',\n            children: result.map((item) => {\n                return {title:item ,key :item }\n            })\n        },\n        ];\n         //console.log(treeTitle);\n        return treeTitle;\n\n    }\n\n\n\n\n\n    onExpand = (expandedKeys) => {\n        console.log('onExpand', expandedKeys);\n        // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n        // or, you can remove all expanded children keys.\n        this.setState({\n            expandedKeys,\n            autoExpandParent: false,\n        });\n    }\n\n    onCheck = (checkedKeys) => {\n        console.log('onCheck', checkedKeys);\n        this.setState({ checkedKeys });\n    }\n\n    onSelect = (selectedKeys, info) => {\n        console.log('onSelect', info);\n        this.setState({ selectedKeys });\n    }\n\n    renderTreeNodes = (data) => {\n        return data.map((item) => {\n            if (item.children) {\n                return (\n                    <TreeNode title={item.title} key={item.title} dataRef={item}>\n                        {this.renderTreeNodes(item.children)}\n                    </TreeNode>\n                );\n            }\n            return <TreeNode {...item} />;\n        });\n    }\n\n\n\n\n\n\n\n    render() {\n        return (\n            <div>\n            <Tree\n                checkable\n                onExpand={this.onExpand}\n                expandedKeys={this.state.expandedKeys}\n                autoExpandParent={this.state.autoExpandParent}\n                onCheck={this.onCheck}\n                checkedKeys={this.state.checkedKeys}\n                onSelect={this.onSelect}\n                selectedKeys={this.state.selectedKeys}\n            >\n                {this.renderTreeNodes(this.titleList())}\n            </Tree>\n                <Tree\n                    checkable\n                    onExpand={this.onExpand}\n                    expandedKeys={this.state.expandedKeys}\n                    autoExpandParent={this.state.autoExpandParent}\n                    onCheck={this.onCheck}\n                    checkedKeys={this.state.checkedKeys}\n                    onSelect={this.onSelect}\n                    selectedKeys={this.state.selectedKeys}\n                >\n                    {this.renderTreeNodes(this.authorList())}\n                </Tree>\n                {/*<Tree*/}\n                    {/*checkable*/}\n                    {/*onExpand={this.onExpand}*/}\n                    {/*expandedKeys={this.state.expandedKeys}*/}\n                    {/*autoExpandParent={this.state.autoExpandParent}*/}\n                    {/*onCheck={this.onCheck}*/}\n                    {/*checkedKeys={this.state.checkedKeys}*/}\n                    {/*onSelect={this.onSelect}*/}\n                    {/*selectedKeys={this.state.selectedKeys}*/}\n                {/*>*/}\n                    {/*{this.renderTreeNodes(treeData)}*/}\n                {/*</Tree>*/}\n                {/*<Tree*/}\n                    {/*checkable*/}\n                    {/*onExpand={this.onExpand}*/}\n                    {/*expandedKeys={this.state.expandedKeys}*/}\n                    {/*autoExpandParent={this.state.autoExpandParent}*/}\n                    {/*onCheck={this.onCheck}*/}\n                    {/*checkedKeys={this.state.checkedKeys}*/}\n                    {/*onSelect={this.onSelect}*/}\n                    {/*selectedKeys={this.state.selectedKeys}*/}\n                {/*>*/}\n                    {/*{this.renderTreeNodes(treeData)}*/}\n                {/*</Tree>*/}\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}